function basketball_simulation(R)
    % Parameters
    Y2 = 2.43; % Height of the basket
    g = 9.81; % Acceleration due to gravity (m/s^2)
    tolerance = 0.18; % Tolerance for the X coordinate
    V0_values = 2:0.125:15; % Range of initial velocities
    theta_values = 15:5:85; % Range of angles in degrees

    % Initialize results storage
    results = [];

    % Loop through each angle and velocity
    for V0 = V0_values
        for theta = theta_values
            % Convert theta to radians
            theta_rad = deg2rad(theta);
            
            % Initial conditions
            vx = V0 * cos(theta_rad); % Initial velocity in x direction
            vy = V0 * sin(theta_rad); % Initial velocity in y direction
            x = 0; % Initial x position
            y = Y2; % Initial y position
            S = 0; % Score initialization
            
            % Time step for simulation
            dt = 0.01; % Time increment for simulation
            
            % Simulation loop
            while y > 0
                % Update positions
                x = x + vx * dt;
                y = y + vy * dt;

                % Update velocity with drag (simple model)
                drag = 0.1; % Drag coefficient (modify as needed)
                vx = vx - drag * vx * dt; % Update x velocity
                vy = vy - (g + drag * vy) * dt; % Update y velocity
                
                % Check if the ball hits the target
                if x >= (R - tolerance) && x <= (R + tolerance) && y <= 2.43
                    S = 1; % Score is 1 if it hits the target
                    break;
                end
            end
            
            % If the ball falls to the ground without hitting the target
            if y <= 0
                S = 0; % Score is 0 if it falls to the ground
            end
            
            % Store the results
            results = [results; V0, theta, S];
        end
    end

    % Plotting the results
    figure;
    hold on;
    for i = 1:size(results, 1)
        if results(i, 3) == 1
            plot(results(i, 2), results(i, 1), 'ko'); % Black dot for score 1
        end
    end
    xlabel('Theta (degrees)');
    ylabel('Initial Velocity (m/s)');
    title('Basketball Shot Simulation Results');
    grid on;
    hold off;
end

% Ngebuat plot untuk dapat kombinasi Vo teta yang gacor, tinggal validasi fisikanya
